
from utils import *


# [joints 7, pixel coord 2, depth 1, rgb 3, point wcs 3]

def process_with_pixels(no_batch):

    # each batch of data contains 50 frames
    name_batch = 'measurements/dataorig_robot_batch' + no_batch + '.pkl'
    batch = pd.read_pickle(name_batch)
    all_flat = np.empty((0,16))
    for i in range(batch.shape[0]):

        rgb = batch.iloc[i]['realsense_rgbdata']
        depth = batch.iloc[i]['realsense_depth']
        joint = batch.iloc[i]['state_j_pos']

        ccs_points,rgb_colors,_,pixel_coords,depth_flat = img_to_ccs(depth_image=depth, principal_point=(240//2, 320//2), camera_resolution=(240,320), skip=1, rgb_image=rgb)
        T0ee,_,_,_,_ = get_jointToCoordinates(joint)
        Teecamera = transformation_values['camera']['transformation_matrix']
        T0cam = np.dot(T0ee, Teecamera)
        wcs_points = np.array([np.dot(T0cam, ccs_point) for ccs_point in ccs_points])[:,:3]

        n_points = wcs_points.shape[0]

        flattened = np.concatenate((np.tile(joint, (n_points,1)), np.array(pixel_coords), np.array(depth_flat).reshape(-1,1), \
                                    np.array(rgb_colors), np.array(wcs_points)), axis=1)
        all_flat = np.append(all_flat, flattened, axis=0)

    cols = ['j'+str(j) for j in range(1,8)]+ ['px', 'py', 'depth_value', 'rgb_value_r', 'rgb_value_g', 'rgb_value_b', 'wcs_x', 'wcs_y', 'wcs_z']
    all_flat = pd.DataFrame(all_flat, columns=cols)
    print(all_flat.shape)
    all_flat.to_pickle('measurements/datapixelflat_batch' + no_batch + '.pkl')


def custom_wcs(no_batch, boundingBox_min, boundingBox_max, mu_nonself, cov_nonself):
    '''if wcp in BB, then it is assumed to be a robot wcp so keep it
    if wcp not in BB, then it is assumed to be non-self/non-robot so replace the original wcp
    with wcp sampled from normal(1000, 1000)'''

    dir_batch = '../01_networks/datapixelflat/datapixelflat_batch'
    name_batch = dir_batch + no_batch + '.pkl'
    batch = pd.read_pickle(name_batch)

    wcp_custom = np.random.multivariate_normal(mu_nonself, cov_nonself, (batch.shape[0],1))
    wcp_custom = wcp_custom.reshape(-1,3)

    wcs_points = batch[['wcs_x', 'wcs_y', 'wcs_z']].values
    mask_boundingBox = (wcs_points[:, :3] > np.tile(boundingBox_min, (wcs_points.shape[0], 1))) * (wcs_points[:, :3] < np.tile(boundingBox_max, (wcs_points.shape[0], 1)))
    mask_boundingBox = np.all(mask_boundingBox, axis=1)

    batch['wcc_x'] = [wcs_points[i,0] if mask_boundingBox[i] else wcp_custom[i,0] for i in range(len(mask_boundingBox))]
    batch['wcc_y'] = [wcs_points[i,1] if mask_boundingBox[i] else wcp_custom[i,1] for i in range(len(mask_boundingBox))]
    batch['wcc_z'] = [wcs_points[i,2] if mask_boundingBox[i] else wcp_custom[i,2] for i in range(len(mask_boundingBox))]

    #print(batch.shape, batch.columns) # ['j1', 'j2', 'j3', 'j4', 'j5', 'j6', 'j7', 'px', 'py', 'depth_value', 'rgb_value_r', 'rgb_value_g', 'rgb_value_b', 'wcs_x', 'wcs_y', 'wcs_z', 'wcc_x', 'wcc_y', 'wcc_z'],
    batch.to_pickle('measurements/datapixelcustom_batch' + no_batch + '.pkl')

batches = ['_rt0'+str(b) for b in range(10)] + ['_rt1'+str(b) for b in range(10)] + ['_rt20']
print(batches)
input('..')
for b in batches:
    print(b)
    custom_wcs(no_batch=b, boundingBox_min = [-0.4, -0.4, -0.025], boundingBox_max = [0.4, 0.4, 0.75], mu_nonself=[1000,1000,1000], cov_nonself=np.eye(3)*1)